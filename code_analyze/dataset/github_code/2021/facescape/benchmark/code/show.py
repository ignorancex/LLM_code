## ================================================================================
## Description: evaluate methods on fs_wild or fs_lab dataset
##
## Usage: 'python show.py' to see all quantitative results generated by estimator.py
##
## Authors: Hao Zhu (zhuhaoese@nju.edu.cn)
##
## License: MIT
## ================================================================================

import numpy as np

require_visi = False

dataset_list = ['fswild', 'fslab']
method_list = ['extreme3dface', # CVPR 2018
               'PRNet', # ECCV 2018
               'Deep3DFaceRec', # CVPRW 2019
               'RingNet', # CVPR 2019
               'DFDN', # ICCV 2019
               'DF2Net', # ICCV 2019
               'UDL', # TIP 2020
               'facescape_opti', # CVPR 2020
               'facescape_deep', # CVPR 2020
               'MGCNet', # ECCV 2020
               '3DDFA_V2', # ECCV 2020
               'SADRNet', # TIP 2021
               'LAP', # CVPR 2021
               'DECA', # SIGGRAPH 2021
              ]

metric_list = ['CD_full', 'MNE_full', 'CR_full']

if require_visi is True:
    metric_list += ['CD_visi', 'MNE_visi']

dataset_name = 'fswild'
print("============================== dataset: %s ==============================" % dataset_name)
print("============================== show in angle ==============================")
for method_name in method_list:
    print("========== %s ==========" % method_name)
    print("angel\t\t0-5\t\t5-30\t\t30-60\t\t60-90\t  |  all\tdone_rate")
    for metric_name in metric_list:
        try:
            this_list = np.loadtxt("../eval_result/%s_%s/%s.txt" % (dataset_name, 
                                                                    method_name, 
                                                                    metric_name))
            
            angel_0_5 = np.mean(this_list[0:100][~np.isnan(this_list[0:100])])
            angel_5_30 = np.mean(this_list[100:200][~np.isnan(this_list[100:200])])
            angel_30_60 = np.mean(this_list[200:300][~np.isnan(this_list[200:300])])
            angel_60_90 = np.mean(this_list[300:][~np.isnan(this_list[300:])])
            angle_all = np.mean(this_list[~np.isnan(this_list)])
            done_rate = float(len(this_list[~np.isnan(this_list)])) / len(this_list)
            
            print("%s:\t%f\t%f\t%f\t%f  |  %f\t%f" % (metric_name, angel_0_5, angel_5_30, angel_30_60, 
                                                      angel_60_90, angle_all, done_rate))
        except:
            print("No evaluation results found.")

dataset_name = 'fslab'
print("============================== dataset: %s ==============================" % dataset_name)
print("============================== show in angle ==============================")

angle_0_indices, angle_30_indices, angle_60_indices = [], [], []
for sub_idx in range(20):
    for f_idx in range(1):
        for v_idx in [0]:
            angle_0_indices.append(sub_idx*33 + f_idx*11 + v_idx) 
        for v_idx in list(range(1, 9)):
            angle_30_indices.append(sub_idx*33 + f_idx*11 + v_idx) 
        for v_idx in list(range(9, 11)):
            angle_60_indices.append(sub_idx*33 + f_idx*11 + v_idx)

for method_name in method_list:
    print("========== %s ==========" % method_name)
    print("angel\t\t0\t\t30\t\t60\t  |  all\tdone_rate")
    for metric_name in metric_list:
        
        try:
            this_list = np.loadtxt("../eval_result/%s_%s/%s.txt" % (dataset_name, 
                                                                    method_name, 
                                                                    metric_name))

            angel_0 = np.mean(this_list[angle_0_indices][~np.isnan(this_list[angle_0_indices])])
            angel_30 = np.mean(this_list[angle_30_indices][~np.isnan(this_list[angle_30_indices])])
            if len(this_list[angle_60_indices][~np.isnan(this_list[angle_60_indices])]) == 0:
                angel_60 = -1
            else:
                angel_60 = np.mean(this_list[angle_60_indices][~np.isnan(this_list[angle_60_indices])])
            angle_all = np.mean(this_list[~np.isnan(this_list)])
            done_rate = float(len(this_list[~np.isnan(this_list)])) / len(this_list)

            print("%s:\t%f\t%f\t%f  |  %f\t%f" % (metric_name, angel_0, angel_30, angel_60, 
                                                  angle_all, done_rate))
        except:
            print("No evaluation results found.")

            
print("============================== dataset: %s ==============================" % dataset_name)
print("============================== show in focal length ==============================")

f_1200_indices, f_600_indices, f_300_indices = [], [], []
for sub_idx in range(20):
    for v_idx in range(11):
        f_1200_indices.append(sub_idx*33 + 0*11 + v_idx)
        f_600_indices.append(sub_idx*33 + 1*11 + v_idx)
        f_300_indices.append(sub_idx*33 + 2*11 + v_idx)

for method_name in method_list:
    print("========== %s ==========" % method_name)
    print("focal length\t1200\t\t600\t\t300\t  |  all\tdone_rate")
    for metric_name in metric_list:
        
        try:
            this_list = np.loadtxt("../eval_result/%s_%s/%s.txt" % (dataset_name, 
                                                                    method_name, 
                                                                    metric_name))

            f_1200 = np.mean(this_list[f_1200_indices][~np.isnan(this_list[f_1200_indices])])
            f_600 = np.mean(this_list[f_600_indices][~np.isnan(this_list[f_600_indices])])
            f_300 = np.mean(this_list[f_300_indices][~np.isnan(this_list[f_300_indices])])
            f_all = np.mean(this_list[~np.isnan(this_list)])
            done_rate = float(len(this_list[~np.isnan(this_list)])) / len(this_list)

            print("%s:\t%f\t%f\t%f  |  %f\t%f" % (metric_name, f_1200, f_600, f_300, 
                                                  f_all, done_rate))
        except:
            print("No evaluation results found.")
            

