# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'surfpatch.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
from PyQt5.QtWidgets import QMainWindow, QVBoxLayout, QSizePolicy
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from pyvistaqt import QtInteractor
from matplotlib.figure import Figure
import pyvista as pv
from PyQt5.QtCore import QSize
from PyQt5.QtGui import QIcon
import numpy as np
import yaml
import pathlib
import re
from utils.lasso_select import lassoSelector
from utils.patch_partition import Patcher, generate_random_hex_color
from utils.patch_query_hks import PatchQuery
from utils.MulQuery import MulQR
from PyQt5.QtCore import QObject, pyqtSignal


class Ui_MainWindow(QMainWindow):
    signal = pyqtSignal(bool)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1783, 1326)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.surf_mainwindow = QtWidgets.QWidget(self.centralwidget)
        self.surf_mainwindow.setGeometry(QtCore.QRect(10, 10, 1021, 811))
        self.surf_mainwindow.setObjectName("surf_mainwindow")
        self.surface_gallery1 = QtWidgets.QTabWidget(self.centralwidget)
        self.surface_gallery1.setGeometry(QtCore.QRect(1050, 40, 701, 371))
        self.surface_gallery1.setDocumentMode(False)
        self.surface_gallery1.setObjectName("surface_gallery1")
        self.p1 = QtWidgets.QWidget()
        self.p1.setObjectName("p1")
        self.b1 = QtWidgets.QPushButton(self.p1)
        self.b1.setGeometry(QtCore.QRect(0, 0, 170, 170))
        self.b1.setText("")
        self.b1.setObjectName("b1")
        self.b2 = QtWidgets.QPushButton(self.p1)
        self.b2.setGeometry(QtCore.QRect(174, 0, 170, 170))
        self.b2.setText("")
        self.b2.setObjectName("b2")
        self.b3 = QtWidgets.QPushButton(self.p1)
        self.b3.setGeometry(QtCore.QRect(347, 0, 170, 170))
        self.b3.setText("")
        self.b3.setObjectName("b3")
        self.b4 = QtWidgets.QPushButton(self.p1)
        self.b4.setGeometry(QtCore.QRect(520, 0, 170, 170))
        self.b4.setText("")
        self.b4.setObjectName("b4")
        self.b5 = QtWidgets.QPushButton(self.p1)
        self.b5.setGeometry(QtCore.QRect(0, 170, 170, 170))
        self.b5.setText("")
        self.b5.setObjectName("b5")
        self.b6 = QtWidgets.QPushButton(self.p1)
        self.b6.setGeometry(QtCore.QRect(174, 170, 170, 170))
        self.b6.setText("")
        self.b6.setObjectName("b6")
        self.b7 = QtWidgets.QPushButton(self.p1)
        self.b7.setGeometry(QtCore.QRect(347, 170, 170, 170))
        self.b7.setText("")
        self.b7.setObjectName("b7")
        self.b8 = QtWidgets.QPushButton(self.p1)
        self.b8.setGeometry(QtCore.QRect(520, 170, 170, 170))
        self.b8.setText("")
        self.b8.setObjectName("b8")
        self.surface_gallery1.addTab(self.p1, "")
        self.p2 = QtWidgets.QWidget()
        self.p2.setObjectName("p2")
        self.b9 = QtWidgets.QPushButton(self.p2)
        self.b9.setGeometry(QtCore.QRect(0, 0, 170, 170))
        self.b9.setText("")
        self.b9.setObjectName("b9")
        self.b13 = QtWidgets.QPushButton(self.p2)
        self.b13.setGeometry(QtCore.QRect(0, 170, 170, 170))
        self.b13.setText("")
        self.b13.setObjectName("b13")
        self.b10 = QtWidgets.QPushButton(self.p2)
        self.b10.setGeometry(QtCore.QRect(174, 0, 170, 170))
        self.b10.setText("")
        self.b10.setObjectName("b10")
        self.b15 = QtWidgets.QPushButton(self.p2)
        self.b15.setGeometry(QtCore.QRect(347, 170, 170, 170))
        self.b15.setText("")
        self.b15.setObjectName("b15")
        self.b12 = QtWidgets.QPushButton(self.p2)
        self.b12.setGeometry(QtCore.QRect(520, 0, 170, 170))
        self.b12.setText("")
        self.b12.setObjectName("b12")
        self.b14 = QtWidgets.QPushButton(self.p2)
        self.b14.setGeometry(QtCore.QRect(174, 170, 170, 170))
        self.b14.setText("")
        self.b14.setObjectName("b14")
        self.b11 = QtWidgets.QPushButton(self.p2)
        self.b11.setGeometry(QtCore.QRect(347, 0, 170, 170))
        self.b11.setText("")
        self.b11.setObjectName("b11")
        self.b16 = QtWidgets.QPushButton(self.p2)
        self.b16.setGeometry(QtCore.QRect(520, 170, 170, 170))
        self.b16.setText("")
        self.b16.setObjectName("b16")
        self.surface_gallery1.addTab(self.p2, "")
        self.p3 = QtWidgets.QWidget()
        self.p3.setObjectName("p3")
        self.b17 = QtWidgets.QPushButton(self.p3)
        self.b17.setGeometry(QtCore.QRect(0, 0, 170, 170))
        self.b17.setText("")
        self.b17.setObjectName("b17")
        self.b21 = QtWidgets.QPushButton(self.p3)
        self.b21.setGeometry(QtCore.QRect(0, 170, 170, 170))
        self.b21.setText("")
        self.b21.setObjectName("b21")
        self.b18 = QtWidgets.QPushButton(self.p3)
        self.b18.setGeometry(QtCore.QRect(174, 0, 170, 170))
        self.b18.setText("")
        self.b18.setObjectName("b18")
        self.b23 = QtWidgets.QPushButton(self.p3)
        self.b23.setGeometry(QtCore.QRect(347, 170, 170, 170))
        self.b23.setText("")
        self.b23.setObjectName("b23")
        self.b20 = QtWidgets.QPushButton(self.p3)
        self.b20.setGeometry(QtCore.QRect(520, 0, 170, 170))
        self.b20.setText("")
        self.b20.setObjectName("b20")
        self.b22 = QtWidgets.QPushButton(self.p3)
        self.b22.setGeometry(QtCore.QRect(174, 170, 170, 170))
        self.b22.setText("")
        self.b22.setObjectName("b22")
        self.b19 = QtWidgets.QPushButton(self.p3)
        self.b19.setGeometry(QtCore.QRect(347, 0, 170, 170))
        self.b19.setText("")
        self.b19.setObjectName("b19")
        self.b24 = QtWidgets.QPushButton(self.p3)
        self.b24.setGeometry(QtCore.QRect(520, 170, 170, 170))
        self.b24.setText("")
        self.b24.setObjectName("b24")
        self.surface_gallery1.addTab(self.p3, "")
        self.p4 = QtWidgets.QWidget()
        self.p4.setObjectName("p4")
        self.b25 = QtWidgets.QPushButton(self.p4)
        self.b25.setGeometry(QtCore.QRect(0, 0, 170, 170))
        self.b25.setText("")
        self.b25.setObjectName("b25")
        self.b29 = QtWidgets.QPushButton(self.p4)
        self.b29.setGeometry(QtCore.QRect(0, 170, 170, 170))
        self.b29.setText("")
        self.b29.setObjectName("b29")
        self.b26 = QtWidgets.QPushButton(self.p4)
        self.b26.setGeometry(QtCore.QRect(174, 0, 170, 170))
        self.b26.setText("")
        self.b26.setObjectName("b26")
        self.b31 = QtWidgets.QPushButton(self.p4)
        self.b31.setGeometry(QtCore.QRect(347, 170, 170, 170))
        self.b31.setText("")
        self.b31.setObjectName("b31")
        self.b28 = QtWidgets.QPushButton(self.p4)
        self.b28.setGeometry(QtCore.QRect(520, 0, 170, 170))
        self.b28.setText("")
        self.b28.setObjectName("b28")
        self.b30 = QtWidgets.QPushButton(self.p4)
        self.b30.setGeometry(QtCore.QRect(174, 170, 170, 170))
        self.b30.setText("")
        self.b30.setObjectName("b30")
        self.b27 = QtWidgets.QPushButton(self.p4)
        self.b27.setGeometry(QtCore.QRect(347, 0, 170, 170))
        self.b27.setText("")
        self.b27.setObjectName("b27")
        self.b32 = QtWidgets.QPushButton(self.p4)
        self.b32.setGeometry(QtCore.QRect(520, 170, 170, 170))
        self.b32.setText("")
        self.b32.setObjectName("b32")
        self.surface_gallery1.addTab(self.p4, "")
        self.p5 = QtWidgets.QWidget()
        self.p5.setObjectName("p5")
        self.b33 = QtWidgets.QPushButton(self.p5)
        self.b33.setGeometry(QtCore.QRect(0, 0, 170, 170))
        self.b33.setText("")
        self.b33.setObjectName("b33")
        self.b37 = QtWidgets.QPushButton(self.p5)
        self.b37.setGeometry(QtCore.QRect(0, 170, 170, 170))
        self.b37.setText("")
        self.b37.setObjectName("b37")
        self.b34 = QtWidgets.QPushButton(self.p5)
        self.b34.setGeometry(QtCore.QRect(174, 0, 170, 170))
        self.b34.setText("")
        self.b34.setObjectName("b34")
        self.b39 = QtWidgets.QPushButton(self.p5)
        self.b39.setGeometry(QtCore.QRect(347, 170, 170, 170))
        self.b39.setText("")
        self.b39.setObjectName("b39")
        self.b36 = QtWidgets.QPushButton(self.p5)
        self.b36.setGeometry(QtCore.QRect(520, 0, 170, 170))
        self.b36.setText("")
        self.b36.setObjectName("b36")
        self.b38 = QtWidgets.QPushButton(self.p5)
        self.b38.setGeometry(QtCore.QRect(174, 170, 170, 170))
        self.b38.setText("")
        self.b38.setObjectName("b38")
        self.b35 = QtWidgets.QPushButton(self.p5)
        self.b35.setGeometry(QtCore.QRect(347, 0, 170, 170))
        self.b35.setText("")
        self.b35.setObjectName("b35")
        self.b40 = QtWidgets.QPushButton(self.p5)
        self.b40.setGeometry(QtCore.QRect(520, 170, 170, 170))
        self.b40.setText("")
        self.b40.setObjectName("b40")
        self.surface_gallery1.addTab(self.p5, "")
        self.patch_window = QtWidgets.QWidget(self.centralwidget)
        self.patch_window.setGeometry(QtCore.QRect(530, 830, 501, 451))
        self.patch_window.setObjectName("patch_window")
        self.tsne_window = QtWidgets.QWidget(self.centralwidget)
        self.tsne_window.setGeometry(QtCore.QRect(10, 830, 501, 451))
        self.tsne_window.setObjectName("tsne_window")
        self.surface_gallery2 = QtWidgets.QTabWidget(self.centralwidget)
        self.surface_gallery2.setGeometry(QtCore.QRect(1050, 480, 701, 581))
        self.surface_gallery2.setDocumentMode(False)
        self.surface_gallery2.setObjectName("surface_gallery2")
        self.p1_2 = QtWidgets.QWidget()
        self.p1_2.setObjectName("p1_2")
        self.c17 = QtWidgets.QPushButton(self.p1_2)
        self.c17.setGeometry(QtCore.QRect(140, 420, 135, 135))
        self.c17.setText("")
        self.c17.setObjectName("c17")
        self.c5 = QtWidgets.QPushButton(self.p1_2)
        self.c5.setGeometry(QtCore.QRect(560, 0, 135, 135))
        self.c5.setText("")
        self.c5.setObjectName("c5")
        self.c3 = QtWidgets.QPushButton(self.p1_2)
        self.c3.setGeometry(QtCore.QRect(280, 0, 135, 135))
        self.c3.setText("")
        self.c3.setObjectName("c3")
        self.c18 = QtWidgets.QPushButton(self.p1_2)
        self.c18.setGeometry(QtCore.QRect(280, 420, 135, 135))
        self.c18.setText("")
        self.c18.setObjectName("c18")
        self.c4 = QtWidgets.QPushButton(self.p1_2)
        self.c4.setGeometry(QtCore.QRect(420, 0, 135, 135))
        self.c4.setText("")
        self.c4.setObjectName("c4")
        self.c8 = QtWidgets.QPushButton(self.p1_2)
        self.c8.setGeometry(QtCore.QRect(280, 140, 135, 135))
        self.c8.setText("")
        self.c8.setObjectName("c8")
        self.c12 = QtWidgets.QPushButton(self.p1_2)
        self.c12.setGeometry(QtCore.QRect(140, 280, 135, 135))
        self.c12.setText("")
        self.c12.setObjectName("c12")
        self.c14 = QtWidgets.QPushButton(self.p1_2)
        self.c14.setGeometry(QtCore.QRect(420, 280, 135, 135))
        self.c14.setText("")
        self.c14.setObjectName("c14")
        self.c13 = QtWidgets.QPushButton(self.p1_2)
        self.c13.setGeometry(QtCore.QRect(280, 280, 135, 135))
        self.c13.setText("")
        self.c13.setObjectName("c13")
        self.c11 = QtWidgets.QPushButton(self.p1_2)
        self.c11.setGeometry(QtCore.QRect(0, 280, 135, 135))
        self.c11.setText("")
        self.c11.setObjectName("c11")
        self.c9 = QtWidgets.QPushButton(self.p1_2)
        self.c9.setGeometry(QtCore.QRect(420, 140, 135, 135))
        self.c9.setText("")
        self.c9.setObjectName("c9")
        self.c7 = QtWidgets.QPushButton(self.p1_2)
        self.c7.setGeometry(QtCore.QRect(140, 140, 135, 135))
        self.c7.setText("")
        self.c7.setObjectName("c7")
        self.c15 = QtWidgets.QPushButton(self.p1_2)
        self.c15.setGeometry(QtCore.QRect(560, 280, 135, 135))
        self.c15.setText("")
        self.c15.setObjectName("c15")
        self.c6 = QtWidgets.QPushButton(self.p1_2)
        self.c6.setGeometry(QtCore.QRect(0, 140, 135, 135))
        self.c6.setText("")
        self.c6.setObjectName("c6")
        self.c2 = QtWidgets.QPushButton(self.p1_2)
        self.c2.setGeometry(QtCore.QRect(140, 0, 135, 135))
        self.c2.setText("")
        self.c2.setObjectName("c2")
        self.c19 = QtWidgets.QPushButton(self.p1_2)
        self.c19.setGeometry(QtCore.QRect(420, 420, 135, 135))
        self.c19.setText("")
        self.c19.setObjectName("c19")
        self.c20 = QtWidgets.QPushButton(self.p1_2)
        self.c20.setGeometry(QtCore.QRect(560, 420, 135, 135))
        self.c20.setText("")
        self.c20.setObjectName("c20")
        self.c1 = QtWidgets.QPushButton(self.p1_2)
        self.c1.setGeometry(QtCore.QRect(0, 0, 135, 135))
        self.c1.setText("")
        self.c1.setObjectName("c1")
        self.c10 = QtWidgets.QPushButton(self.p1_2)
        self.c10.setGeometry(QtCore.QRect(560, 140, 135, 135))
        self.c10.setText("")
        self.c10.setObjectName("c10")
        self.c16 = QtWidgets.QPushButton(self.p1_2)
        self.c16.setGeometry(QtCore.QRect(0, 420, 135, 135))
        self.c16.setText("")
        self.c16.setObjectName("c16")
        self.surface_gallery2.addTab(self.p1_2, "")
        self.p2_2 = QtWidgets.QWidget()
        self.p2_2.setObjectName("p2_2")
        self.c37 = QtWidgets.QPushButton(self.p2_2)
        self.c37.setGeometry(QtCore.QRect(140, 420, 135, 135))
        self.c37.setText("")
        self.c37.setObjectName("c37")
        self.c25 = QtWidgets.QPushButton(self.p2_2)
        self.c25.setGeometry(QtCore.QRect(560, 0, 135, 135))
        self.c25.setText("")
        self.c25.setObjectName("c25")
        self.c23 = QtWidgets.QPushButton(self.p2_2)
        self.c23.setGeometry(QtCore.QRect(280, 0, 135, 135))
        self.c23.setText("")
        self.c23.setObjectName("c23")
        self.c38 = QtWidgets.QPushButton(self.p2_2)
        self.c38.setGeometry(QtCore.QRect(280, 420, 135, 135))
        self.c38.setText("")
        self.c38.setObjectName("c38")
        self.c24 = QtWidgets.QPushButton(self.p2_2)
        self.c24.setGeometry(QtCore.QRect(420, 0, 135, 135))
        self.c24.setText("")
        self.c24.setObjectName("c24")
        self.c28 = QtWidgets.QPushButton(self.p2_2)
        self.c28.setGeometry(QtCore.QRect(280, 140, 135, 135))
        self.c28.setText("")
        self.c28.setObjectName("c28")
        self.c32 = QtWidgets.QPushButton(self.p2_2)
        self.c32.setGeometry(QtCore.QRect(140, 280, 135, 135))
        self.c32.setText("")
        self.c32.setObjectName("c32")
        self.c34 = QtWidgets.QPushButton(self.p2_2)
        self.c34.setGeometry(QtCore.QRect(420, 280, 135, 135))
        self.c34.setText("")
        self.c34.setObjectName("c34")
        self.c33 = QtWidgets.QPushButton(self.p2_2)
        self.c33.setGeometry(QtCore.QRect(280, 280, 135, 135))
        self.c33.setText("")
        self.c33.setObjectName("c33")
        self.c31 = QtWidgets.QPushButton(self.p2_2)
        self.c31.setGeometry(QtCore.QRect(0, 280, 135, 135))
        self.c31.setText("")
        self.c31.setObjectName("c31")
        self.c29 = QtWidgets.QPushButton(self.p2_2)
        self.c29.setGeometry(QtCore.QRect(420, 140, 135, 135))
        self.c29.setText("")
        self.c29.setObjectName("c29")
        self.c27 = QtWidgets.QPushButton(self.p2_2)
        self.c27.setGeometry(QtCore.QRect(140, 140, 135, 135))
        self.c27.setText("")
        self.c27.setObjectName("c27")
        self.c35 = QtWidgets.QPushButton(self.p2_2)
        self.c35.setGeometry(QtCore.QRect(560, 280, 135, 135))
        self.c35.setText("")
        self.c35.setObjectName("c35")
        self.c26 = QtWidgets.QPushButton(self.p2_2)
        self.c26.setGeometry(QtCore.QRect(0, 140, 135, 135))
        self.c26.setText("")
        self.c26.setObjectName("c26")
        self.c22 = QtWidgets.QPushButton(self.p2_2)
        self.c22.setGeometry(QtCore.QRect(140, 0, 135, 135))
        self.c22.setText("")
        self.c22.setObjectName("c22")
        self.c39 = QtWidgets.QPushButton(self.p2_2)
        self.c39.setGeometry(QtCore.QRect(420, 420, 135, 135))
        self.c39.setText("")
        self.c39.setObjectName("c39")
        self.c40 = QtWidgets.QPushButton(self.p2_2)
        self.c40.setGeometry(QtCore.QRect(560, 420, 135, 135))
        self.c40.setText("")
        self.c40.setObjectName("c40")
        self.c21 = QtWidgets.QPushButton(self.p2_2)
        self.c21.setGeometry(QtCore.QRect(0, 0, 135, 135))
        self.c21.setText("")
        self.c21.setObjectName("c21")
        self.c30 = QtWidgets.QPushButton(self.p2_2)
        self.c30.setGeometry(QtCore.QRect(560, 140, 135, 135))
        self.c30.setText("")
        self.c30.setObjectName("c30")
        self.c36 = QtWidgets.QPushButton(self.p2_2)
        self.c36.setGeometry(QtCore.QRect(0, 420, 135, 135))
        self.c36.setText("")
        self.c36.setObjectName("c36")
        self.surface_gallery2.addTab(self.p2_2, "")
        self.p3_2 = QtWidgets.QWidget()
        self.p3_2.setObjectName("p3_2")
        self.c57 = QtWidgets.QPushButton(self.p3_2)
        self.c57.setGeometry(QtCore.QRect(140, 420, 135, 135))
        self.c57.setText("")
        self.c57.setObjectName("c57")
        self.c45 = QtWidgets.QPushButton(self.p3_2)
        self.c45.setGeometry(QtCore.QRect(560, 0, 135, 135))
        self.c45.setText("")
        self.c45.setObjectName("c45")
        self.c43 = QtWidgets.QPushButton(self.p3_2)
        self.c43.setGeometry(QtCore.QRect(280, 0, 135, 135))
        self.c43.setText("")
        self.c43.setObjectName("c43")
        self.c58 = QtWidgets.QPushButton(self.p3_2)
        self.c58.setGeometry(QtCore.QRect(280, 420, 135, 135))
        self.c58.setText("")
        self.c58.setObjectName("c58")
        self.c44 = QtWidgets.QPushButton(self.p3_2)
        self.c44.setGeometry(QtCore.QRect(420, 0, 135, 135))
        self.c44.setText("")
        self.c44.setObjectName("c44")
        self.c48 = QtWidgets.QPushButton(self.p3_2)
        self.c48.setGeometry(QtCore.QRect(280, 140, 135, 135))
        self.c48.setText("")
        self.c48.setObjectName("c48")
        self.c52 = QtWidgets.QPushButton(self.p3_2)
        self.c52.setGeometry(QtCore.QRect(140, 280, 135, 135))
        self.c52.setText("")
        self.c52.setObjectName("c52")
        self.c54 = QtWidgets.QPushButton(self.p3_2)
        self.c54.setGeometry(QtCore.QRect(420, 280, 135, 135))
        self.c54.setText("")
        self.c54.setObjectName("c54")
        self.c53 = QtWidgets.QPushButton(self.p3_2)
        self.c53.setGeometry(QtCore.QRect(280, 280, 135, 135))
        self.c53.setText("")
        self.c53.setObjectName("c53")
        self.c51 = QtWidgets.QPushButton(self.p3_2)
        self.c51.setGeometry(QtCore.QRect(0, 280, 135, 135))
        self.c51.setText("")
        self.c51.setObjectName("c51")
        self.c49 = QtWidgets.QPushButton(self.p3_2)
        self.c49.setGeometry(QtCore.QRect(420, 140, 135, 135))
        self.c49.setText("")
        self.c49.setObjectName("c49")
        self.c47 = QtWidgets.QPushButton(self.p3_2)
        self.c47.setGeometry(QtCore.QRect(140, 140, 135, 135))
        self.c47.setText("")
        self.c47.setObjectName("c47")
        self.c55 = QtWidgets.QPushButton(self.p3_2)
        self.c55.setGeometry(QtCore.QRect(560, 280, 135, 135))
        self.c55.setText("")
        self.c55.setObjectName("c55")
        self.c46 = QtWidgets.QPushButton(self.p3_2)
        self.c46.setGeometry(QtCore.QRect(0, 140, 135, 135))
        self.c46.setText("")
        self.c46.setObjectName("c46")
        self.c42 = QtWidgets.QPushButton(self.p3_2)
        self.c42.setGeometry(QtCore.QRect(140, 0, 135, 135))
        self.c42.setText("")
        self.c42.setObjectName("c42")
        self.c59 = QtWidgets.QPushButton(self.p3_2)
        self.c59.setGeometry(QtCore.QRect(420, 420, 135, 135))
        self.c59.setText("")
        self.c59.setObjectName("c59")
        self.c60 = QtWidgets.QPushButton(self.p3_2)
        self.c60.setGeometry(QtCore.QRect(560, 420, 135, 135))
        self.c60.setText("")
        self.c60.setObjectName("c60")
        self.c41 = QtWidgets.QPushButton(self.p3_2)
        self.c41.setGeometry(QtCore.QRect(0, 0, 135, 135))
        self.c41.setText("")
        self.c41.setObjectName("c41")
        self.c50 = QtWidgets.QPushButton(self.p3_2)
        self.c50.setGeometry(QtCore.QRect(560, 140, 135, 135))
        self.c50.setText("")
        self.c50.setObjectName("c50")
        self.c56 = QtWidgets.QPushButton(self.p3_2)
        self.c56.setGeometry(QtCore.QRect(0, 420, 135, 135))
        self.c56.setText("")
        self.c56.setObjectName("c56")
        self.surface_gallery2.addTab(self.p3_2, "")
        self.p4_2 = QtWidgets.QWidget()
        self.p4_2.setObjectName("p4_2")
        self.c61 = QtWidgets.QPushButton(self.p4_2)
        self.c61.setGeometry(QtCore.QRect(0, 0, 135, 135))
        self.c61.setText("")
        self.c61.setObjectName("c61")
        self.c62 = QtWidgets.QPushButton(self.p4_2)
        self.c62.setGeometry(QtCore.QRect(140, 0, 135, 135))
        self.c62.setText("")
        self.c62.setObjectName("c62")
        self.c63 = QtWidgets.QPushButton(self.p4_2)
        self.c63.setGeometry(QtCore.QRect(280, 0, 135, 135))
        self.c63.setText("")
        self.c63.setObjectName("c63")
        self.c64 = QtWidgets.QPushButton(self.p4_2)
        self.c64.setGeometry(QtCore.QRect(420, 0, 135, 135))
        self.c64.setText("")
        self.c64.setObjectName("c64")
        self.c65 = QtWidgets.QPushButton(self.p4_2)
        self.c65.setGeometry(QtCore.QRect(560, 0, 135, 135))
        self.c65.setText("")
        self.c65.setObjectName("c65")
        self.c70 = QtWidgets.QPushButton(self.p4_2)
        self.c70.setGeometry(QtCore.QRect(560, 140, 135, 135))
        self.c70.setText("")
        self.c70.setObjectName("c70")
        self.c67 = QtWidgets.QPushButton(self.p4_2)
        self.c67.setGeometry(QtCore.QRect(140, 140, 135, 135))
        self.c67.setText("")
        self.c67.setObjectName("c67")
        self.c66 = QtWidgets.QPushButton(self.p4_2)
        self.c66.setGeometry(QtCore.QRect(0, 140, 135, 135))
        self.c66.setText("")
        self.c66.setObjectName("c66")
        self.c69 = QtWidgets.QPushButton(self.p4_2)
        self.c69.setGeometry(QtCore.QRect(420, 140, 135, 135))
        self.c69.setText("")
        self.c69.setObjectName("c69")
        self.c68 = QtWidgets.QPushButton(self.p4_2)
        self.c68.setGeometry(QtCore.QRect(280, 140, 135, 135))
        self.c68.setText("")
        self.c68.setObjectName("c68")
        self.c75 = QtWidgets.QPushButton(self.p4_2)
        self.c75.setGeometry(QtCore.QRect(560, 280, 135, 135))
        self.c75.setText("")
        self.c75.setObjectName("c75")
        self.c74 = QtWidgets.QPushButton(self.p4_2)
        self.c74.setGeometry(QtCore.QRect(420, 280, 135, 135))
        self.c74.setText("")
        self.c74.setObjectName("c74")
        self.c71 = QtWidgets.QPushButton(self.p4_2)
        self.c71.setGeometry(QtCore.QRect(0, 280, 135, 135))
        self.c71.setText("")
        self.c71.setObjectName("c71")
        self.c72 = QtWidgets.QPushButton(self.p4_2)
        self.c72.setGeometry(QtCore.QRect(140, 280, 135, 135))
        self.c72.setText("")
        self.c72.setObjectName("c72")
        self.c73 = QtWidgets.QPushButton(self.p4_2)
        self.c73.setGeometry(QtCore.QRect(280, 280, 135, 135))
        self.c73.setText("")
        self.c73.setObjectName("c73")
        self.c80 = QtWidgets.QPushButton(self.p4_2)
        self.c80.setGeometry(QtCore.QRect(560, 420, 135, 135))
        self.c80.setText("")
        self.c80.setObjectName("c80")
        self.c76 = QtWidgets.QPushButton(self.p4_2)
        self.c76.setGeometry(QtCore.QRect(0, 420, 135, 135))
        self.c76.setText("")
        self.c76.setObjectName("c76")
        self.c77 = QtWidgets.QPushButton(self.p4_2)
        self.c77.setGeometry(QtCore.QRect(140, 420, 135, 135))
        self.c77.setText("")
        self.c77.setObjectName("c77")
        self.c78 = QtWidgets.QPushButton(self.p4_2)
        self.c78.setGeometry(QtCore.QRect(280, 420, 135, 135))
        self.c78.setText("")
        self.c78.setObjectName("c78")
        self.c79 = QtWidgets.QPushButton(self.p4_2)
        self.c79.setGeometry(QtCore.QRect(420, 420, 135, 135))
        self.c79.setText("")
        self.c79.setObjectName("c79")
        self.surface_gallery2.addTab(self.p4_2, "")
        self.p5_2 = QtWidgets.QWidget()
        self.p5_2.setObjectName("p5_2")
        self.c97 = QtWidgets.QPushButton(self.p5_2)
        self.c97.setGeometry(QtCore.QRect(140, 420, 135, 135))
        self.c97.setText("")
        self.c97.setObjectName("c97")
        self.c85 = QtWidgets.QPushButton(self.p5_2)
        self.c85.setGeometry(QtCore.QRect(560, 0, 135, 135))
        self.c85.setText("")
        self.c85.setObjectName("c85")
        self.c83 = QtWidgets.QPushButton(self.p5_2)
        self.c83.setGeometry(QtCore.QRect(280, 0, 135, 135))
        self.c83.setText("")
        self.c83.setObjectName("c83")
        self.c98 = QtWidgets.QPushButton(self.p5_2)
        self.c98.setGeometry(QtCore.QRect(280, 420, 135, 135))
        self.c98.setText("")
        self.c98.setObjectName("c98")
        self.c84 = QtWidgets.QPushButton(self.p5_2)
        self.c84.setGeometry(QtCore.QRect(420, 0, 135, 135))
        self.c84.setText("")
        self.c84.setObjectName("c84")
        self.c88 = QtWidgets.QPushButton(self.p5_2)
        self.c88.setGeometry(QtCore.QRect(280, 140, 135, 135))
        self.c88.setText("")
        self.c88.setObjectName("c88")
        self.c92 = QtWidgets.QPushButton(self.p5_2)
        self.c92.setGeometry(QtCore.QRect(140, 280, 135, 135))
        self.c92.setText("")
        self.c92.setObjectName("c92")
        self.c94 = QtWidgets.QPushButton(self.p5_2)
        self.c94.setGeometry(QtCore.QRect(420, 280, 135, 135))
        self.c94.setText("")
        self.c94.setObjectName("c94")
        self.c93 = QtWidgets.QPushButton(self.p5_2)
        self.c93.setGeometry(QtCore.QRect(280, 280, 135, 135))
        self.c93.setText("")
        self.c93.setObjectName("c93")
        self.c91 = QtWidgets.QPushButton(self.p5_2)
        self.c91.setGeometry(QtCore.QRect(0, 280, 135, 135))
        self.c91.setText("")
        self.c91.setObjectName("c91")
        self.c89 = QtWidgets.QPushButton(self.p5_2)
        self.c89.setGeometry(QtCore.QRect(420, 140, 135, 135))
        self.c89.setText("")
        self.c89.setObjectName("c89")
        self.c87 = QtWidgets.QPushButton(self.p5_2)
        self.c87.setGeometry(QtCore.QRect(140, 140, 135, 135))
        self.c87.setText("")
        self.c87.setObjectName("c87")
        self.c95 = QtWidgets.QPushButton(self.p5_2)
        self.c95.setGeometry(QtCore.QRect(560, 280, 135, 135))
        self.c95.setText("")
        self.c95.setObjectName("c95")
        self.c86 = QtWidgets.QPushButton(self.p5_2)
        self.c86.setGeometry(QtCore.QRect(0, 140, 135, 135))
        self.c86.setText("")
        self.c86.setObjectName("c86")
        self.c82 = QtWidgets.QPushButton(self.p5_2)
        self.c82.setGeometry(QtCore.QRect(140, 0, 135, 135))
        self.c82.setText("")
        self.c82.setObjectName("c82")
        self.c99 = QtWidgets.QPushButton(self.p5_2)
        self.c99.setGeometry(QtCore.QRect(420, 420, 135, 135))
        self.c99.setText("")
        self.c99.setObjectName("c99")
        self.c100 = QtWidgets.QPushButton(self.p5_2)
        self.c100.setGeometry(QtCore.QRect(560, 420, 135, 135))
        self.c100.setText("")
        self.c100.setObjectName("c100")
        self.c81 = QtWidgets.QPushButton(self.p5_2)
        self.c81.setGeometry(QtCore.QRect(0, 0, 135, 135))
        self.c81.setText("")
        self.c81.setObjectName("c81")
        self.c90 = QtWidgets.QPushButton(self.p5_2)
        self.c90.setGeometry(QtCore.QRect(560, 140, 135, 135))
        self.c90.setText("")
        self.c90.setObjectName("c90")
        self.c96 = QtWidgets.QPushButton(self.p5_2)
        self.c96.setGeometry(QtCore.QRect(0, 420, 135, 135))
        self.c96.setText("")
        self.c96.setObjectName("c96")
        self.surface_gallery2.addTab(self.p5_2, "")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(1060, 10, 201, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(1060, 453, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.Reset = QtWidgets.QPushButton(self.centralwidget)
        self.Reset.setGeometry(QtCore.QRect(1350, 1070, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.Reset.setFont(font)
        self.Reset.setObjectName("Reset")
        self.patch_box = QtWidgets.QSpinBox(self.centralwidget)
        self.patch_box.setGeometry(QtCore.QRect(1270, 1150, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.patch_box.setFont(font)
        self.patch_box.setMinimum(10)
        self.patch_box.setMaximum(70)
        self.patch_box.setSingleStep(20)
        self.patch_box.setProperty("value", 50)
        self.patch_box.setObjectName("patch_box")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(1060, 1150, 121, 30))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.patch_slider = QtWidgets.QSlider(self.centralwidget)
        self.patch_slider.setGeometry(QtCore.QRect(1350, 1160, 311, 20))
        self.patch_slider.setMinimum(10)
        self.patch_slider.setMaximum(70)
        self.patch_slider.setSingleStep(20)
        self.patch_slider.setPageStep(20)
        self.patch_slider.setProperty("value", 50)
        self.patch_slider.setOrientation(QtCore.Qt.Horizontal)
        self.patch_slider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.patch_slider.setObjectName("patch_slider")
        self.cluster_slider = QtWidgets.QSlider(self.centralwidget)
        self.cluster_slider.setGeometry(QtCore.QRect(1350, 1246, 310, 21))
        self.cluster_slider.setMinimum(10)
        self.cluster_slider.setMaximum(70)
        self.cluster_slider.setSingleStep(20)
        self.cluster_slider.setPageStep(20)
        self.cluster_slider.setProperty("value", 50)
        self.cluster_slider.setOrientation(QtCore.Qt.Horizontal)
        self.cluster_slider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.cluster_slider.setObjectName("cluster_slider")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(1060, 1234, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.cluster_box = QtWidgets.QSpinBox(self.centralwidget)
        self.cluster_box.setGeometry(QtCore.QRect(1270, 1240, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.cluster_box.setFont(font)
        self.cluster_box.setMinimum(10)
        self.cluster_box.setMaximum(70)
        self.cluster_box.setSingleStep(20)
        self.cluster_box.setProperty("value", 50)
        self.cluster_box.setObjectName("cluster_box")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 1783, 23))
        self.menuBar.setObjectName("menuBar")
        self.menufile = QtWidgets.QMenu(self.menuBar)
        self.menufile.setObjectName("menufile")
        MainWindow.setMenuBar(self.menuBar)
        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setObjectName("actionopen")
        self.menufile.addAction(self.actionopen)
        self.menuBar.addAction(self.menufile.menuAction())

        self.retranslateUi(MainWindow)
        self.surface_gallery1.setCurrentIndex(0)
        self.surface_gallery2.setCurrentIndex(0)
        self.cluster_box.valueChanged['int'].connect(self.cluster_slider.setValue)  # type: ignore
        self.cluster_slider.valueChanged['int'].connect(self.cluster_box.setValue)  # type: ignore
        self.patch_box.valueChanged['int'].connect(self.patch_slider.setValue)  # type: ignore
        self.patch_slider.valueChanged['int'].connect(self.patch_box.setValue)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # ============================user's code===========================

        # property setting
        self.mesh = None
        self.mesh2 = None
        self.patch_rendered = False
        self.distance_threshold = 50
        self.query_mark = False
        self.query_threshold = 50
        self.cluster_slider_mark = False
        self.lasso_active = True
        self.selected_buttons = []
        self.sil_dict = {"color": 'black', "line_width": 4, "decimate": 0.35, "opacity": 1}
        # self.default_colors = ["#0E58C7", "#007998", "#BB0F3D", "#007744", "#A2A7DE",
        #                        "#F9566C", "#564516", "#BFC501", "#1B3D2F", "#D93500",
        #                        "#B0716A", "#00B6FF", "#7D6E7F", "#2E8683", "#6CFACD"]
        # self.default_colors = ["#B98EFF", "#FF85DE", "#FFAA83", "#FFD267", "#F9F871",
        #                        "#C4FCEF", "#D5CABD", "#50FBDF", "#FEFEDF", "#9BE9FF",
        #                        "#97FFBC", "#A5FF9B", "#FFD9C9", "#BAD2FF", "#00DFF4"]
        self.default_colors = ["#FFD700", "#00FFFF", "#98FB98", "#FFE4B5", "#87CEFA",
                               "#FFA07A", "#D5E3E3", "#FF4500", "#9370DB", "#3CB371",
                               "#FA8072", "#00FA9A", "#F08080", "#AFEEEE", "#FF6347",
                               "#7B68EE", "#ADFF2F", "#B0C4DE", "#8A2BE2", "#FFA500"]

        # self.default_colors = None # for exp1 in section 4.1
        self.screencount = 0

        self.actionopen.triggered.connect(self.menu_open)

        self.pyvista_widget = QtInteractor()
        self.pyvista_widget2 = QtInteractor()

        # self.pyvista_widget.enable_mesh_picking(left_clicking=True)
        self.pyvista_widget.enable_surface_picking(left_clicking=True, show_message=False)

        self.layout = QVBoxLayout(self.surf_mainwindow)
        self.layout.addWidget(self.pyvista_widget)

        self.layout2 = QVBoxLayout(self.tsne_window)
        self.layout3 = QVBoxLayout(self.patch_window)
        self.layout2.addWidget(self.pyvista_widget2)

        # connect gallery button
        for i in range(1, 41):
            attr_name = f"b{i}"
            button = getattr(self, attr_name)
            button.clicked.connect(self.open_gallery_clicked)

        for i in range(1, 101):
            attr_name = f"c{i}"
            button = getattr(self, attr_name)
            button.clicked.connect(self.open_gallery_clicked_l2)

        # 2d plot and lasso selection
        # self.fig, self.ax = plt.subplots()
        self.fig = Figure()
        self.ax = self.fig.add_subplot(111)
        self.ax.set_axis_off()
        self.canvas = FigureCanvas(self.fig)
        self.fig.subplots_adjust(left=0, right=1, top=1, bottom=0)
        self.canvas.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.canvas.updateGeometry()
        self.layout3.addWidget(self.canvas)

        # button connect
        self.Reset.clicked.connect(self.reset)
        # self.patch_slider.valueChanged.connect(self.change_patch_scale)
        # self.cluster_slider.valueChanged.connect(self.change_cluster_scale)
        self.patch_slider.valueChanged.connect(self.change_slider_value)
        self.cluster_slider.valueChanged.connect(self.change_slider_value)

        # signal connect
        self.signal.connect(self.action)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SurfPatch"))
        self.surface_gallery1.setTabText(self.surface_gallery1.indexOf(self.p1), _translate("MainWindow", "page 1"))
        self.surface_gallery1.setTabText(self.surface_gallery1.indexOf(self.p2), _translate("MainWindow", "page 2"))
        self.surface_gallery1.setTabText(self.surface_gallery1.indexOf(self.p3), _translate("MainWindow", "page 3"))
        self.surface_gallery1.setTabText(self.surface_gallery1.indexOf(self.p4), _translate("MainWindow", "page 4"))
        self.surface_gallery1.setTabText(self.surface_gallery1.indexOf(self.p5), _translate("MainWindow", "page 5"))
        self.surface_gallery2.setTabText(self.surface_gallery2.indexOf(self.p1_2), _translate("MainWindow", "page 1"))
        self.surface_gallery2.setTabText(self.surface_gallery2.indexOf(self.p2_2), _translate("MainWindow", "page 2"))
        self.surface_gallery2.setTabText(self.surface_gallery2.indexOf(self.p3_2), _translate("MainWindow", "page 3"))
        self.surface_gallery2.setTabText(self.surface_gallery2.indexOf(self.p4_2), _translate("MainWindow", "page 4"))
        self.surface_gallery2.setTabText(self.surface_gallery2.indexOf(self.p5_2), _translate("MainWindow", "page 5"))
        self.label_4.setText(_translate("MainWindow", "representative surfaces"))
        self.label_5.setText(_translate("MainWindow", "sample surfaces"))
        self.Reset.setText(_translate("MainWindow", "reset"))
        self.label.setText(_translate("MainWindow", "patch size"))
        self.label_2.setText(_translate("MainWindow", "matching tolerance"))
        self.menufile.setTitle(_translate("MainWindow", "File"))
        self.actionopen.setText(_translate("MainWindow", "open"))

    # ==========================slot function==========================
    def menu_open(self, Filepath):
        # directory = QtWidgets.QFileDialog.getOpenFileName(None, "selectFile", "./", "All Files (*);;Text Files (*.txt)")
        # self.meshPath = directory[0]

        directory = QtWidgets.QFileDialog.getExistingDirectory(None, "selectFile", "./")
        self.meshDirPath = directory

        # self.mesh = pv.read(self.meshPath)
        # self.pyvista_widget.clear_actors()
        # self.actor=self.pyvista_widget.add_mesh(self.mesh,opacity=0.1)

        # display the gallery

        # first surface level
        icon_list_1 = []
        img_list_1 = []
        with open(os.path.join(self.meshDirPath, "query_result.yaml")) as f:
            self.surf_dict = yaml.load(f, Loader=yaml.FullLoader)
        for key, value in self.surf_dict.items():
            icon = QIcon(value[0])
            icon_list_1.append(icon)
            img_list_1.append(value[0])

        from collections import OrderedDict
        self.mesh_dict = OrderedDict()
        self.tsne_dict = OrderedDict()
        self.hks_dict = OrderedDict()
        with open(os.path.join(self.meshDirPath, "param.yaml")) as f:
            self.data_dict = OrderedDict(yaml.load(f, Loader=yaml.FullLoader))
        for n, (key, value) in enumerate(self.data_dict.items()):
            self.mesh_dict[n] = value['data']
        for n, (key, value) in enumerate(self.data_dict.items()):
            self.tsne_dict[n] = value['project2D']
        for n, (key, value) in enumerate(self.data_dict.items()):
            self.hks_dict[n] = value['hks_feature']

        # set button icon
        self._galleryID = {}
        try:
            for i in range(1, len(icon_list_1) + 1):
                attr_name = f"b{i}"
                button = getattr(self, attr_name)
                button.setIcon(icon_list_1[i - 1])
                button.setIconSize(icon_list_1[i - 1].actualSize(QSize(170, 170)))

                screenshot_pth = pathlib.Path(img_list_1[i - 1])
                mesh_pth = pathlib.Path(screenshot_pth).parent.parent.joinpath("data").joinpath(
                    screenshot_pth.stem + ".stl")
                self._galleryID[attr_name] = mesh_pth
        except Exception as e:
            pass

        x_embedding_pth = pathlib.Path(self.meshDirPath).joinpath("x_embedding.npy")
        y_pred_pth = pathlib.Path(self.meshDirPath).joinpath("y_pred.npy")
        self.x_embedding = np.load(str(x_embedding_pth))
        self.y_pred = np.load(str(y_pred_pth))
        self.selector, self.colors = lassoSelector(self.fig, self.ax, self.canvas, self.x_embedding,
                                                   self.y_pred,
                                                   colormap=self.default_colors, lasso_active=self.lasso_active,
                                                   signal=self.signal)

    def select_surf(self):
        try:
            # select the first surface
            self.pyvista_widget.clear_actors()
            self.pyvista_widget2.clear_actors()
            self.selecotr, self.colors = lassoSelector(self.fig, self.ax, self.canvas, self.x_embedding,
                                                       self.y_pred,
                                                       colormap=self.default_colors, lasso_active=self.lasso_active,
                                                       signal=self.signal)
            self.idx = self.selector.ind
            if len(self.idx) >= 1:
                self.idx = self.idx[0]
            self.mesh_pth = self.mesh_dict[self.idx]
            self.mesh = pv.read(self.mesh_pth)
            self.pyvista_widget.add_mesh(self.mesh, color='black', style='wireframe', opacity=0.4)

            # convert the tsne-window to the surface-level scatter plot
            self.ax.clear()
            self.canvas.draw()
            self.tsne_pth = self.tsne_dict[self.idx]
            self.hks_pth = self.hks_dict[self.idx]
            # tsne_array = np.load(self.tsne_pth)

            self.patcher = Patcher(self.mesh_pth, self.tsne_pth, self.hks_pth, self.distance_threshold)
            self.patcher.get_surfpatch()
            self.patchDict, self.patch_hks, self.clusterLabel = self.patcher.get_patchInfo()

            self.patchQR = self.update_ax()
            self.selector, self.colors = lassoSelector(self.fig, self.ax, self.canvas, self.patchQR[0],
                                                       self.patchQR[1],
                                                       colormap=self.default_colors, lasso_active=self.lasso_active,
                                                       signal=self.signal)
            self.canvas.draw()
        except:
            pass

    def select_patch(self):
        try:
            self.pyvista_widget.clear_actors()
            self.pyvista_widget2.clear_actors()
            # self.selecotr,self.colors = lassoSelector(self.fig, self.ax, self.canvas, self.x_embedding, self.y_pred)
            if self.lasso_active:
                self.pidxs = self.selector.ind
                self.pidx = self.pidxs[0]
                self.patch_color = self.colors[self.pidx]
                self.patch = self.patchDict[self.pidx]
                # self.patch = pv.wrap(self.patch).smooth(n_iter=500, relaxation_factor=1)
                self.patch = pv.wrap(self.patch).smooth_taubin(n_iter=250)
                self.patch_level_hks = self.patch_hks[self.pidx]
                self.pyvista_widget.add_mesh(self.mesh, color='gray', style='wireframe', opacity=0.2)
                self.pyvista_widget.add_mesh(self.patch, color=self.colors[self.pidx], lighting=True, ambient=0.4,
                                             diffuse=0.6, specular=0.5, specular_power=30,
                                             smooth_shading=True, silhouette=self.sil_dict, opacity=0.7)
                self.pyvista_widget2.add_mesh(self.patch, color=self.colors[self.pidx], lighting=True, ambient=0.4,
                                              diffuse=0.6, specular=0.5, specular_power=30,
                                              smooth_shading=True, silhouette=self.sil_dict)
                # self.pyvista_widget.add_points(self.patch.points, color="red", point_size=17, style="points_gaussian") # points
                # self.pyvista_widget2.add_mesh(self.patch, color=self.default_colors[np.random.choice(15,1)[0]], ambient=0.4, opacity=0.85) # screenshot

                # visualize other same patterned patches
                patch_pred = self.patchQR[1]  # y_pred for patch-level
                cls_idx = np.where(patch_pred == patch_pred[self.pidx])[0]
                # other_patches = [self.patchDict[i] for i in cls_idx if i != self.pidx] # all other patches
                other_patches = [pv.wrap(self.patchDict[i]).smooth_taubin(n_iter=250) for i in self.pidxs if
                                 i != self.pidx]  # selected other patches

                # =================export patches=================
                # self.patch.save(r"D:\MyStore\paper\SurfPatch\experiments\exp1\section2\patch_select.stl")
                # for i, patch in enumerate(other_patches):
                #     pv.wrap(patch).save(r"D:\MyStore\paper\SurfPatch\experiments\exp1\section2\patch_{i}.stl".format(i))
                print(self.colors[self.pidx])
                print(self.pyvista_widget.camera_position)

                # =================visualize patches v2 (single color)=================
                for j, op in enumerate(other_patches):
                    self.pyvista_widget.add_mesh(op, color=self.colors[self.pidx], lighting=True, ambient=0.4,
                                                 diffuse=0.6, specular=0.5, specular_power=30,
                                                 smooth_shading=True, silhouette=self.sil_dict, opacity=0.7)

            else:  # if lasso is not active
                self.pidx = self.selector.click_ind
                self.patch = self.patchDict[self.pidx]
                self.patch = pv.wrap(self.patch).smooth(n_iter=200, relaxation_factor=0.9)
                self.patch_level_hks = self.patch_hks[self.pidx]
                self.pyvista_widget.add_mesh(self.mesh, color='gray', style='wireframe', opacity=0.2)
                self.pyvista_widget.add_mesh(self.patch, color=self.colors[self.pidx], lighting=True, ambient=0.4,
                                             diffuse=0.6, specular=0.5, specular_power=30,
                                             smooth_shading=True, silhouette=self.sil_dict)
                self.pyvista_widget2.add_mesh(self.patch, color=self.colors[self.pidx], lighting=True, ambient=0.4,
                                              diffuse=0.6, specular=0.5, specular_power=30,
                                              smooth_shading=True, silhouette=self.sil_dict)

            self.query_mark = True
        except Exception as e:
            print(e)
            pass

    def update_ax(self):
        x_num = len(self.patch_hks)
        self.patchFeature = np.zeros((x_num, 128))
        for key, value in self.patch_hks.items():
            self.patchFeature[key, :] = value

        # patch query clusterLabel
        self.patch_querier = PatchQuery(self.mesh, self.patchDict, self.patchFeature,
                                        query_threshold=self.query_threshold)  # hks features
        # self.patch_querier = PatchQuery(list(self.patchDict.values()), query_threshold=50)  # improved hks features
        return self.patch_querier.patchQR

    def query_patches(self):
        # TODO: query patches from two surfaces
        ...

    def render_patches(self):
        if not self.patch_rendered:
            patch_num = np.unique(self.clusterLabel).shape[0]
            self.patch_cm1 = [generate_random_hex_color() for i in range(patch_num)]
            for i in range(patch_num):
                self.pyvista_widget.add_mesh(self.patchDict[i], color=self.patch_cm1[i], opacity=0.75)
            self.patch_rendered = True
        else:
            self.pyvista_widget.clear_actors()
            self.pyvista_widget.add_mesh(self.mesh, color='black', style='wireframe')
            self.patch_rendered = False

    def change_patch_scale(self):
        self.distance_threshold = self.patch_slider.value()
        self.patcher = Patcher(self.mesh_pth, str(self.tsne_pth), str(self.hks_pth), self.distance_threshold)
        self.patcher.get_surfpatch()
        self.patchDict, self.patch_hks, self.clusterLabel = self.patcher.get_patchInfo()

    def change_cluster_scale(self):
        self.query_threshold = self.cluster_slider.value()
        self.patch_querier = PatchQuery(self.mesh, self.patchDict, self.patchFeature, self.query_threshold)
        self.patchQR = self.patch_querier.patchQR
        self.cluster_slider_mark = True

    def reset(self):
        self.ax.clear()
        self.ax.set_axis_off()
        self.canvas.draw()
        self.pyvista_widget.clear_actors()
        self.pyvista_widget2.clear_actors()
        self.selector, self.colors = lassoSelector(self.fig, self.ax, self.canvas, self.x_embedding,
                                                   self.y_pred,
                                                   colormap=self.default_colors, lasso_active=self.lasso_active,
                                                   signal=self.signal)
        self.canvas.draw()
        self.query_mark = False
        for button in self.selected_buttons:
            button.setChecked(False)
        self.selected_buttons = []

    def screenshot(self):
        self.pyvista_widget.screenshot(f"screenshot/mesh_{self.screencount}.png")
        self.pyvista_widget2.screenshot(f"screenshot/patch_{self.screencount}.png")
        self.fig.savefig(f"screenshot/umap_{self.screencount}.png", dpi=600)
        self.screencount += 1
        print(self.pyvista_widget.camera_position)

    def open_gallery_clicked(self):
        self.pyvista_widget.clear_actors()
        sender = self.sender()
        sender.setCheckable(True)
        sender.setChecked(True)
        self.selected_buttons.append(sender)
        btn_key = sender.objectName()
        self.mesh = pv.read(str(self._galleryID[btn_key].absolute()))

        # render second surface level
        self._galleryID2 = {}
        seeker = re.compile(r"\d+")

        # clear button icon
        for i in range(1, 101):
            attr_name = f"c{i}"
            button = getattr(self, attr_name)
            button.setIcon(QIcon())

        for i in range(1, 101):
            try:
                idx = int(seeker.search(btn_key).group())
                attr_name = f"c{i}"
                button = getattr(self, attr_name)
                icon = QIcon(self.surf_dict[idx - 1][i - 1])
                button.setIcon(icon)
                button.setIconSize(icon.actualSize(QSize(135, 135)))
                button.setText("")

                screenshot_pth = pathlib.Path(self.surf_dict[idx - 1][i - 1])
                mesh_pth = pathlib.Path(screenshot_pth).parent.parent.joinpath("data").joinpath(
                    screenshot_pth.stem + ".stl")
                self._galleryID2[attr_name] = mesh_pth
            except Exception as e:
                print(e)
                break
        # self.selecotr = lassoSelector(self.fig, self.ax, self.canvas, self.x_embedding, self.y_pred)

    def open_gallery_clicked_l2(self):
        if not self.query_mark:
            self.pyvista_widget.clear_actors()
            self.ax.clear()
            self.ax.set_axis_off()
            self.canvas.draw()
            sender = self.sender()
            sender.setCheckable(True)
            sender.setChecked(True)
            self.selected_buttons.append(sender)
            btn_key = sender.objectName()
            seeker = re.compile(r"\d+")
            idx = int(seeker.search(btn_key).group())
            btn_key = f"c{idx}"
            self.mesh_pth = str(self._galleryID2[btn_key].absolute())
            print(self.mesh_pth)
            self.mesh = pv.read(self.mesh_pth)
            self.pyvista_widget.add_mesh(self.mesh, color='black', style='wireframe', opacity=0.4)

            tm = pathlib.Path(self.mesh_pth)
            self.tsne_pth = tm.parent.parent.joinpath("project2D", "level1", tm.stem + ".npy")
            tsne_array = np.load(self.tsne_pth)
            self.hks_pth = tm.parent.parent.joinpath("hks_feature", tm.stem + ".npy")

            self.patcher = Patcher(self.mesh_pth, str(self.tsne_pth), str(self.hks_pth), self.distance_threshold)
            self.patcher.get_surfpatch()
            self.patchDict, self.patch_hks, self.clusterLabel = self.patcher.get_patchInfo()

            self.patchQR = self.update_ax()
            self.selector, self.colors = lassoSelector(self.fig, self.ax, self.canvas, self.patchQR[0],
                                                       self.patchQR[1],
                                                       colormap=self.default_colors, lasso_active=self.lasso_active,
                                                       signal=self.signal)
            self.canvas.draw()

        else:
            sender = self.sender()
            sender.setCheckable(True)
            sender.setChecked(True)
            self.selected_buttons.append(sender)
            btn_key = sender.objectName()
            seeker = re.compile(r"\d+")
            idx = int(seeker.search(btn_key).group())
            btn_key = f"c{idx}"
            self.mesh_pth2 = str(self._galleryID2[btn_key].absolute())
            self.mesh2 = pv.read(self.mesh_pth2)
            self.pyvista_widget.add_mesh(self.mesh2, color='gray', style='wireframe', opacity=0.3)

            # do the query
            tsne_pth2 = pathlib.Path(self.mesh_pth2).parent.parent.joinpath("project2D", "level1",
                                                                            pathlib.Path(
                                                                                self.mesh_pth2).stem + ".npy")
            hks_pth2 = pathlib.Path(self.mesh_pth2).parent.parent.joinpath("hks_feature",
                                                                           pathlib.Path(
                                                                               self.mesh_pth2).stem + ".npy")
            meshDict = {"mesh_pth": self.mesh_pth2, "tsne_pth": str(tsne_pth2), "hks_pth": str(hks_pth2)}

            mulqr = MulQR(self.patch, self.patch_level_hks, meshDict, self.query_threshold, self.distance_threshold)
            query_list = mulqr.run()

            # =================single color=================
            for i, patch2 in enumerate(query_list):
                self.pyvista_widget.add_mesh(patch2, color=self.colors[self.pidx], lighting=True, ambient=0.4,
                                             diffuse=0.6, specular=0.5, specular_power=30,
                                             smooth_shading=True, silhouette=self.sil_dict, opacity=0.7)

    def change_selection_state(self):
        if self.clickbox.isChecked():
            self.lassobox.setChecked(False)
            self.lasso_active = False
            # self.selector, self.colors = lassoSelector(self.fig, self.ax, self.canvas, self.x_embedding,
            #                                            self.y_pred,
            #                                            colormap=self.default_colors, lasso_active=self.lasso_active)
        else:
            self.lassobox.setChecked(True)
            self.lasso_active = True
            # self.selector, self.colors = lassoSelector(self.fig, self.ax, self.canvas, self.x_embedding,
            #                                            self.y_pred,
            #                                            colormap=self.default_colors, lasso_active=self.lasso_active)

    def action(self, state):
        if state is True:
            self.select_patch()
        else:
            pass

    def change_slider_value(self):

        self.ax.clear()
        self.ax.set_axis_off()
        self.canvas.draw()

        self.query_threshold = self.cluster_slider.value()
        self.distance_threshold = self.patch_slider.value()

        self.patcher = Patcher(self.mesh_pth, str(self.tsne_pth), str(self.hks_pth), self.distance_threshold)
        self.patcher.get_surfpatch()
        self.patchDict, self.patch_hks, self.clusterLabel = self.patcher.get_patchInfo()

        self.patchQR = self.update_ax()
        self.selector, self.colors = lassoSelector(self.fig, self.ax, self.canvas, self.patchQR[0],
                                                   self.patchQR[1],
                                                   colormap=self.default_colors, lasso_active=self.lasso_active,
                                                   signal=self.signal)
        self.canvas.draw()
