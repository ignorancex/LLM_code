#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# xitorch documentation build configuration file, created by
# sphinx-quickstart on Tue Sep 22 10:46:17 2020.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import sphinx_rtd_theme
sys.path.insert(0, os.path.abspath('../xitorch/'))

# -- API docs file generators ------------------------------------------------
import json
import importlib
import inspect

# generate the api files
api_dir = os.path.abspath("api")
api_toc_path = os.path.join(api_dir, "toc.json")
module_index_template = """{name}
{underlines}

.. toctree::
   :maxdepth: 2

   {api_list}
"""
module_api_list_indent = " "*3
file_template = """{name}
{underlines}

.. auto{function_or_class}:: {fullname}
   {with_members}
"""
with open(api_toc_path, "r") as f:
    api_toc = json.load(f)

def format_api_display(api, desc):
    if desc == "":
        return api
    else:
        return "{api}: {desc} <{api}>".format(desc=desc, api=api)

for module, module_details in api_toc.items():
    api_list = [format_api_display(api, desc) for (api, desc) in module_details["api"].items()]
    module_dir_name = module.replace(".", "_")
    module_api_dir = os.path.join(api_dir, module_dir_name)
    if not os.path.exists(module_api_dir):
        os.mkdir(module_api_dir)

    # write the index.rst
    api_list_str = ("\n"+module_api_list_indent).join(api_list)
    module_index_fname = os.path.join(module_api_dir, "index.rst")
    with open(module_index_fname, "w") as f:
        content = module_index_template.format(
            name=module,
            underlines="="*len(module),
            api_list=api_list_str
        )
        f.write(content)

    pymod = importlib.import_module(module)
    for fn in module_details["api"]:
        fullname = module + "." + fn
        isfn = inspect.isfunction(getattr(pymod, fn))
        fname = os.path.join(module_api_dir, fn+".rst")
        file_content = file_template.format(
            name=fn,
            fullname=fullname,
            underlines="="*len(fn),
            function_or_class="function" if isfn else "class",
            with_members="" if isfn else ":members:"
        )
        with open(fname, "w") as f:
            f.write(file_content)

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

anonymize = True

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'jupyter_sphinx',
    'sphinx.ext.napoleon',
    'sphinx.ext.mathjax',
    'sphinx.ext.doctest',
    'sphinx.ext.extlinks',
    'sphinx_rtd_theme',
    'sphinx.ext.viewcode']

napoleon_include_special_with_doc = True
napoleon_include_private_with_doc = True
autodoc_member_order = "bysource"

html_static_path = ['_static']
html_css_files = [
    'css/math.css',
    'css/general.css',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'xitorch'
if anonymize:
    author = 'xitorch developer' # anonymize
else:
    author = 'Muhammad Firmansyah Kasim'
copyright = '2020, %s' % author

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
import xitorch
# The full version, including alpha/beta/rc tags.
release = xitorch.__version__
# short version
version = ".".join(release.split(".")[:2])

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

xitorch_github_page = "https://github.com/mfkasim1/xitorch"
extlinks = {
    "github": ("{gh}/%s".format(gh=xitorch_github_page), "xitorch Github page"),
    "github_issue": ("{gh}/issues/%s".format(gh=xitorch_github_page), "issue page"),
}



# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

html_show_sourcelink = not anonymize

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'xitorchdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'xitorch.tex', 'xitorch Documentation',
     'Muhammad Firmansyah Kasim', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'xitorch', 'xitorch Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'xitorch', 'xitorch Documentation',
     author, 'xitorch', 'One line description of project.',
     'Miscellaneous'),
]
