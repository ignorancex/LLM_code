#!/usr/bin/env python
#
# GAMBIT: Global and Modular BSM Inference Tool
#*********************************************
# \file
#
#  Model harvesting script for ColliderBit.
#  Generates ColliderBit_models_rollcall.hpp
#  and ColliderPythia_typedefs.hpp
#
#  This script identifies all the models for
#  which a new Pythia has been defined
#  (typically but not neccessarily by GUM),
#  and includes them in the relevant headers.
#
#*********************************************
#
#  Authors (add name and date if you modify):
#
#  \author Pat Scott
#          (patscott@physics.mcgill.ca)
#    \date 2019 Jan
#
#*********************************************
import os

toolsfile="./Utils/scripts/harvesting_tools.py"
exec(compile(open(toolsfile, "rb").read(), toolsfile, 'exec')) # Python 2/3 compatible version of 'execfile'

def main(argv):

    model_headers=set([])

    # Handle command line options
    verbose = False
    try:
        opts, args = getopt.getopt(argv,"vx:",["verbose","exclude-models="])
    except getopt.GetoptError:
        print('Usage: collider_harvestor.py [flags]')
        print(' flags:')
        print('        -v : More verbose output')
        sys.exit(2)
    for opt, arg in opts:
      if opt in ('-v','--verbose'):
        verbose = True
        print('collider_harvester.py: verbose=True')

    # Get list of models to include in ColliderBit_model_rollcall.hpp
    model_headers.update(retrieve_generic_headers(verbose,"./ColliderBit/include/gambit/ColliderBit/models","model", set()))

    if verbose:
        print("ColliderBit model headers identified:")
        for h in model_headers:
            print('  gambit/ColliderBit/models/'+h)

    # Generate a C++ header containing all the model headers we have just harvested.
    towrite = "\
//   GAMBIT: Global and Modular BSM Inference Tool\n\
//   *********************************************\n\
///  \\file                                       \n\
///                                               \n\
///  Rollcall header for ColliderBit models.      \n\
///                                               \n\
///  This file is automatically generated by      \n\
///  collider_harvester.py.  Do not modify.       \n\
///                                               \n\
///  *********************************************\n\
///                                               \n\
///  \\author The GAMBIT Collaboration            \n\
///  \date "+datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")+"\n\
///                                               \n\
///  *********************************************\n\
                                                  \n\
#pragma once                                      \n\
                                                  \n"

    for h in model_headers:
        towrite+='#include \"gambit/ColliderBit/models/{0}\"\n'.format(h)

    with open("./ColliderBit/include/gambit/ColliderBit/ColliderBit_models_rollcall.hpp","w") as f:
        f.write(towrite)

    # Generate a C++ header containing ColliderPythia typedefs for all the model headers we have just harvested.
    towrite = "\
//   GAMBIT: Global and Modular BSM Inference Tool\n\
//   *********************************************\n\
///  \\file                                       \n\
///                                               \n\
///  ColliderPythia typedefs for models in        \n\
///  ColliderBit.                                 \n\
///                                               \n\
///  This file is automatically generated by      \n\
///  collider_harvester.py.  Do not modify.       \n\
///                                               \n\
///  *********************************************\n\
///                                               \n\
///  \\author The GAMBIT Collaboration            \n\
///  \date "+datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")+"\n\
///                                               \n\
///  *********************************************\n\
                                                  \n\
#pragma once                                      \n\
                                                  \n\
#include \"gambit/ColliderBit/colliders/ColliderPythia.hpp\"\n\
                                                  \n\
namespace Gambit                                  \n\
{                                                 \n\
  namespace ColliderBit                           \n\
  {                                               \n\
                                                  \n\
    /// Typedefs for each Pythia collider         \n\
    /// @{                                        \n\
    typedef ColliderPythia<Pythia_default::Pythia8::Pythia, Pythia_default::Pythia8::Event> ColliderPythia_defaultversion;\n"

    for h in model_headers:
        if h != "SUSY.hpp":
            m = re.sub(".hpp", "", h)
            towrite+='    typedef ColliderPythia<Pythia_{0}_default::Pythia8::Pythia, Pythia_{0}_default::Pythia8::Event> ColliderPythia_{0}_defaultversion;\n'.format(m)
    towrite+="    /// @}\n\n  }\n}\n"

    with open("./ColliderBit/include/gambit/ColliderBit/colliders/ColliderPythia_typedefs.hpp","w") as f:
        f.write(towrite)

    if verbose:
        print("\nGenerated ColliderBit_models_rollcall.hpp.")
        print("Generated ColliderPythia_typedefs.hpp.\n")

# Handle command line arguments (verbosity)
if __name__ == "__main__":
   main(sys.argv[1:])

