# -*- coding: utf-8 -*-
"""224_Resnet50_ImageNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U3yuIpAVHKIWrRt4JyIKaZ6sOQJH77eA
"""

from google.colab import drive
drive.mount('/content/drive')

#code part 4
img_rows, img_cols = 224, 224 #number of rows and columns to convert the images to
input_shape = (img_rows, img_cols, 3)#format to store the images (rows, columns,channels) called channels last

def url_to_image(url):
	# download the image, convert it to a NumPy array, and then read
	# it into OpenCV format
	resp = urllib.request.urlopen(url)
	image = np.asarray(bytearray(resp.read()), dtype="uint8")
	image = cv2.imdecode(image, cv2.IMREAD_COLOR)
 
	# return the image
	return image

#%clear base_model

import tensorflow as tf

base_model = tf.keras.applications.ResNet50(input_shape=(224,224, 3),weights='imagenet', include_top = False)
x = base_model.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)

x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dense(512, activation='relu')(x)
preds = tf.keras.layers.Dense(4, activation ='softmax')(x)

model = tf.keras.models.Model(inputs=base_model.input, outputs=preds)

from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img

train_datagen = ImageDataGenerator()
valid_datagen = ImageDataGenerator()
    
train_generator = train_datagen.flow_from_directory(
        '/content/drive/My Drive/db/ImgNet/train/',
        classes=['bikes','ships','tractors','wagons'],
        target_size=(img_rows, img_cols),#The target_size is the size of your input images,every image will be resized to this size
        batch_size=32,
        class_mode='categorical')

valid_generator = valid_datagen.flow_from_directory(
        '/content/drive/My Drive/db/ImgNet/valid/',
        classes=['bikes','ships','tractors','wagons'],        
        target_size=(img_rows, img_cols),#The target_size is the size of your input images,every image will be resized to this size
        batch_size=32,
        class_mode='categorical')

for layer in base_model.layers:
  layer.trainable = False


model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(
      train_generator,
      steps_per_epoch=train_generator.n//train_generator.batch_size,
      epochs=5,
      validation_data=valid_generator,
      validation_steps=25)

test_datagen = ImageDataGenerator()

test_generator = test_datagen.flow_from_directory(
        '/content/drive/My Drive/db/ImgNet/test/',
        classes=['bikes','ships','tractors','wagons'],
        target_size=(374, 374),#The target_size is the size of your input images,every image will be resized to this size
        batch_size=32,
        class_mode='categorical')

history=model.evaluate(
test_generator    
)
