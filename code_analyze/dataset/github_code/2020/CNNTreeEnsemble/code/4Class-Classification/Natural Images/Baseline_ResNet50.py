# -*- coding: utf-8 -*-
"""ResNet50_natimdb_v1.01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q2dlcdGadeLlqI9q44EKbUzy-e57Rmls
"""

from google.colab import drive
drive.mount('/content/drive')

#code part 4
img_rows, img_cols = 224, 224 #number of rows and columns to convert the images to
input_shape = (img_rows, img_cols, 3)#format to store the images (rows, columns,channels) called channels last

def url_to_image(url):
	# download the image, convert it to a NumPy array, and then read
	# it into OpenCV format
	resp = urllib.request.urlopen(url)
	image = np.asarray(bytearray(resp.read()), dtype="uint8")
	image = cv2.imdecode(image, cv2.IMREAD_COLOR)
 
	# return the image
	return image

#%clear base_model

import tensorflow as tf

from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img

#train_datagen = ImageDataGenerator(rescale=1./255)
#valid_datagen = ImageDataGenerator(rescale=1./255)

train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=tf.keras.applications.resnet50.preprocess_input)   
valid_datagen = tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=tf.keras.applications.resnet50.preprocess_input)

train_generator1 = train_datagen.flow_from_directory(
        '/content/drive/My Drive/db/natimdb/train/',
        classes=['airplane','motorbike','car','person'],
        target_size=(img_rows, img_cols),batch_size=32,class_mode='categorical')

valid_generator1 = valid_datagen.flow_from_directory(
        '/content/drive/My Drive/db/natimdb/valid/',
        classes=['airplane','motorbike','car','person'],
        target_size=(img_rows, img_cols),batch_size=32,class_mode='categorical')


base_model1 = tf.keras.applications.ResNet50(weights='imagenet', include_top = False)

for layer in base_model1.layers:   layer.trainable = False

x = base_model1.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)

x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dense(512, activation='relu')(x)
preds = tf.keras.layers.Dense(4, activation ='softmax')(x)

model1 = tf.keras.models.Model(inputs=base_model1.input, outputs=preds)

model1.compile(optimizer='RMSProp', loss='categorical_crossentropy', metrics=['accuracy'])

history = model1.fit(
      train_generator1,
      steps_per_epoch=train_generator1.n//train_generator1.batch_size,
      epochs=4,
      validation_data=valid_generator1,
      validation_steps=25)

import tensorflow as tf

from keras.preprocessing.image import ImageDataGenerator #, array_to_img, img_to_array, load_img
"""
model1.save('/content/drive/My Drive/db/m1.h5') 
model21.save('/content/drive/My Drive/db/m21.h5') 
model22.save('/content/drive/My Drive/db/m22.h5') 

model1 = tf.keras.models.load_model('m1.h5')
model21 = tf.keras.models.load_model('m21.h5')
model22 = tf.keras.models.load_model('m22.h5')
"""


# ntest_total = 745, accuracy_% = 0.9168
# classified = 683
test_datagen = tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=tf.keras.applications.resnet50.preprocess_input)
#test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = valid_datagen.flow_from_directory(
        '/content/drive/My Drive/db/natimdb/test/',
        classes=['airplane','motorbike','car','person'],
        target_size=(img_rows, img_cols),batch_size=32,class_mode='categorical')

history=model1.evaluate(test_generator)